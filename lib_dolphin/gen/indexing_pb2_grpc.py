# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import indexing_pb2 as indexing__pb2


class TimeSeriesServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.insert = channel.unary_unary(
                '/TimeSeriesService/insert',
                request_serializer=indexing__pb2.TimeSeries.SerializeToString,
                response_deserializer=indexing__pb2.ReindexingResponse.FromString,
                )
        self.query = channel.unary_unary(
                '/TimeSeriesService/query',
                request_serializer=indexing__pb2.TimeSeries.SerializeToString,
                response_deserializer=indexing__pb2.TimeSeriesIdx.FromString,
                )
        self.reindex = channel.unary_unary(
                '/TimeSeriesService/reindex',
                request_serializer=indexing__pb2.ReindexingRequest.SerializeToString,
                response_deserializer=indexing__pb2.ReindexingResponse.FromString,
                )
        self.save = channel.unary_unary(
                '/TimeSeriesService/save',
                request_serializer=indexing__pb2.SaveIndexRequest.SerializeToString,
                response_deserializer=indexing__pb2.SaveIndexResponse.FromString,
                )
        self.load = channel.unary_unary(
                '/TimeSeriesService/load',
                request_serializer=indexing__pb2.LoadIndexRequest.SerializeToString,
                response_deserializer=indexing__pb2.LoadIndexResponse.FromString,
                )


class TimeSeriesServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reindex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def save(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def load(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimeSeriesServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'insert': grpc.unary_unary_rpc_method_handler(
                    servicer.insert,
                    request_deserializer=indexing__pb2.TimeSeries.FromString,
                    response_serializer=indexing__pb2.ReindexingResponse.SerializeToString,
            ),
            'query': grpc.unary_unary_rpc_method_handler(
                    servicer.query,
                    request_deserializer=indexing__pb2.TimeSeries.FromString,
                    response_serializer=indexing__pb2.TimeSeriesIdx.SerializeToString,
            ),
            'reindex': grpc.unary_unary_rpc_method_handler(
                    servicer.reindex,
                    request_deserializer=indexing__pb2.ReindexingRequest.FromString,
                    response_serializer=indexing__pb2.ReindexingResponse.SerializeToString,
            ),
            'save': grpc.unary_unary_rpc_method_handler(
                    servicer.save,
                    request_deserializer=indexing__pb2.SaveIndexRequest.FromString,
                    response_serializer=indexing__pb2.SaveIndexResponse.SerializeToString,
            ),
            'load': grpc.unary_unary_rpc_method_handler(
                    servicer.load,
                    request_deserializer=indexing__pb2.LoadIndexRequest.FromString,
                    response_serializer=indexing__pb2.LoadIndexResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TimeSeriesService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TimeSeriesService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeSeriesService/insert',
            indexing__pb2.TimeSeries.SerializeToString,
            indexing__pb2.ReindexingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def query(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeSeriesService/query',
            indexing__pb2.TimeSeries.SerializeToString,
            indexing__pb2.TimeSeriesIdx.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reindex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeSeriesService/reindex',
            indexing__pb2.ReindexingRequest.SerializeToString,
            indexing__pb2.ReindexingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def save(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeSeriesService/save',
            indexing__pb2.SaveIndexRequest.SerializeToString,
            indexing__pb2.SaveIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def load(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TimeSeriesService/load',
            indexing__pb2.LoadIndexRequest.SerializeToString,
            indexing__pb2.LoadIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
