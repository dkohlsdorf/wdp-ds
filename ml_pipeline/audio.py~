import numpy as np

from numpy.fft import fft
from sksound.sounds import Sound
from collections import namedtuple

class WindowParams(namedtuple('WindowParams', 'spec_win spec_step fft_win fft_step')):

    @property
    def pos(self, sample):
        '''
        Return the position of a sample in a spectrogam window in the audio file
        '''
        self.spec_win * self.fft_step
        

def spectrogram_windows(filename, params):
    assert isinstance(params, WindowParams)
    sound = Sound(filename)        
    data  = sound.data        
    print(data.shape)
    if len(sound.data.shape) > 1:
        data = np.mean(data, axis=1) 
    

def fwd_spectrogram(audio, win=512, step=64):
    '''
    Compute the spectrogram of audio data

    audio: one channel audio
    win: window size for dft sliding window
    step: step size for dft sliding windo
    '''
    spectrogram = []
    hanning = np.hanning(win)
    for i in range(win, len(audio), step):
        start = win // 2        
        dft = np.abs(fft(audio[i - win: i] * hanning))[start:win]
        spectrogram.append(dft)
    return np.array(spectrogram)

spectrogram_windows('data/demo/06111101.wav')